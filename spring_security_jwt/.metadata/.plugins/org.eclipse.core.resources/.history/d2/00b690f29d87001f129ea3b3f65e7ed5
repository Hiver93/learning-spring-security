package com.kdw.jwt.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.kdw.jwt.jwt.LoginFilter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	
	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Bean
	public SecurityFilterChain filterChin(HttpSecurity http) throws Exception {
		
		// csrf disable
		http
			.csrf((auth)->auth.disable());
		
		// From 로그인 방식 disable
		http
			.formLogin((auth)->auth.disable());
		
		//http basic 인증 방식 
		http 
			.httpBasic((auth) -> auth.disable());
		
		http
			.authorizeHttpRequests((auth) -> auth
					.requestMatchers("/login", "/", "/join").permitAll()
					.requestMatchers("/admin").hasAnyRole("ADMIN")
					.anyRequest().authenticated()
			);
			
		
		// 세션 설정
		http
			.sessionManagement(session -> session
					.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
			);
		
		http
			.addFilterAt(new LoginFilter(), UsernamePasswordAuthenticationFilter.class);
		
		return http.build();
	}
}
