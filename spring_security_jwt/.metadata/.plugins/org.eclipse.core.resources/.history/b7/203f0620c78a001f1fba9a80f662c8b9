package com.kdw.jwt.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kdw.jwt.jwt.JWTUtil;

import io.jsonwebtoken.ExpiredJwtException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Controller
@ResponseBody
public class ReissueController {
	private final JWTUtil jwtUtil;
	
	public ReissueController(JWTUtil jwtUtil) {
		this.jwtUtil = jwtUtil;
	}
	
	@PostMapping("/reissue")
	public ResponseEntity<?> reissue(HttpServletRequest request, HttpServletResponse response){
		String refresh = null;
		Cookie[] cookies = request.getCookies();
		for(Cookie cookie : cookies) {
			if(cookie.getName().equals("refresh")) {
				refresh = cookie.getValue();
			}
		}
		if(refresh == null) {
			return new ResponseEntity<>("refresh token null", HttpStatus.BAD_REQUEST);
		}
		
		try {
			jwtUtil.isExpired(refresh);
		}catch(ExpiredJwtException e) {
			return new ResponseEntity<>("access token expired",HttpStatus.BAD_REQUEST);
		}
		
		String category = jwtUtil.getCategory(refresh);
		
		if(!category.equals("refresh")) {
			return new ResponseEntity<>("invalid refresh token", HttpStatus.BAD_REQUEST);
		}
		
		String username = jwtUtil.getUsername(refresh);
		String role = jwtUtil.getRole(refresh);
		
		String newAccess = jwtUtil.createJwt("access", username, role, 600000L);
		response.setHeader("access", newAccess);
		return new ResponseEntity<>(HttpStatus.OK);
	}
	
}
